//
//  PostListViewController.swift
//  VIPPatternPractice
//
//  Created by 강민혜 on 3/12/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PostListDisplayLogic: AnyObject
{
  func displayPostList(viewModel: PostList.FetchPostList.ViewModel) // usecase 연결
}

class PostListViewController: UIViewController, PostListDisplayLogic
{
  var interactor: PostListBusinessLogic?
  var router: (NSObjectProtocol & PostListRoutingLogic & PostListDataPassing)?
    
  // MARK: - IBOutlets
    
    @IBOutlet weak var myTableView: UITableView!
    
    typealias DisplayedPost = PostList.FetchPostList.ViewModel.DisplayedPost
    
    // MARK: - Properties
    var postList: [DisplayedPost] = []
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = PostListInteractor()
    let presenter = PostListPresenter()
    let router = PostListRouter()
      
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
      
      fetchPostList()
      configureTableView()
  }
  
    fileprivate func configureTableView() {
        let myTableViewCellNib = UINib(nibName: String(describing: MyTableViewCell.self), bundle: nil)
        
        self.myTableView.register(myTableViewCellNib, forCellReuseIdentifier: "myTableViewCellId")
        
        self.myTableView.rowHeight = UITableView.automaticDimension
        self.myTableView.estimatedRowHeight = 120
        
//        self.myTableView.delegate = self
        self.myTableView.dataSource = self
    }
    
    
    
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
    // 뷰 -> 인터렉터에게 시키기
  func fetchPostList()
  {
    let request = PostList.FetchPostList.Request(count: 10)
      interactor?.fetchPostList(request: request)
  }
  
    // 프리젠터 -> 뷰로 화면을 그리는 것
    func displayPostList(viewModel: PostList.FetchPostList.ViewModel)
  {
    //nameTextField.text = viewModel.name
      self.postList = viewModel.displayedPosts
      self.myTableView.reloadData()
  }
}

extension PostListViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        postList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "myTableViewCellId", for: indexPath) as? MyTableViewCell else { return UITableViewCell() }
        
        let cellData = postList[indexPath.row]
        cell.configureCell(post: cellData)
        
        return cell
    }
}
